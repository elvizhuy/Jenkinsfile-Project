pipeline {
    agent any

    environment {
        ANSIBLE_DIR = '/etc/ansible/Ansible_Roles'
        GIT_USER = 'elvizhuy'
        GIT_DIR = 'Ansible_Roles'
        PLAYBOOK_REPO = 'https://github.com/${GIT_USER}/${GIT_DIR}.git'
        ANSIBLE_SERVER = 'root@10.0.50.30'
        GIT_CONFIG = 'git config --global --add safe.directory'
        GIT_PULL = 'git pull'
        GIT_CHECKOUT = 'git checkout'
        GIT_BRANCH = 'git branch'
    }

    parameters {
        choice(choices: ["bvp"], description: 'Choose Project', name: 'project')
        choice(choices: ["setup_server"], description: 'Choose Role', name: 'role')
        string(description: 'Enter hostname', name: 'hostname', defaultValue: 'test')
        string(description: 'Enter username', name: 'username', defaultValue: 'isofh')
        password(description: 'Enter password', name: 'password', defaultValue: '123123')
        string(description: 'Enter target server IP (comma-separated if multiple)', name: 'targetServerIP', defaultValue: '10.0.50.33:test,10.0.50.66:dev')
        string(description: 'Enter target server user', name: 'targetServerUser', defaultValue: 'root')
        password(description: 'Enter target server password', name: 'targetServerPassword', defaultValue: '123123')
        booleanParam(description: 'Do you want to reboot?', name: 'reboot', defaultValue: false)
        booleanParam(description: 'Do you want to install Docker?', name: 'installDocker', defaultValue: false)
        booleanParam(description: 'Do you want to add SSH key?', name: 'addSSHKey', defaultValue: false)
        booleanParam(description: 'Do you want to add aliases?', name: 'addAliases', defaultValue: false)
        booleanParam(description: 'Do you want to create user?', name: 'createUser', defaultValue: true)
    }

    stages {
        stage('Choose Ansible Roles') {
            when { expression { params.role != null && params.role != '' }}
            steps {
                script {
                    echo "------------ CHECKOUT ANSIBLE ROLES ------------"
                    sshagent(credentials: ['ansible-server-ssh']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ${ANSIBLE_SERVER} "
                        cd ${ANSIBLE_DIR} && 
                        ${GIT_CONFIG} ${ANSIBLE_DIR} && 
                        ${GIT_PULL} && 
                        ${GIT_CHECKOUT} ${params.project} && 
                        ${GIT_PULL} &&
                        echo '.........Show Git Branch ...........' &&
                        ${GIT_BRANCH} &&
                        echo '....................................'
                        "
                        """
                    }
                    echo "------------------ [ DONE ] ------------------"
                }
            }
        }

        stage('Grant Root User SSH Access') {
            steps {
                script {
                    def targetServers = params.targetServerIP.split(',')
                    targetServers.each { server ->
                        def (ip, hostname) = server.split(':')
                        echo "**************** [ Granting root user SSH access on target server ( ${ip} ) ] ********************"
                        sshagent(credentials: ['ansible-server-ssh']) {
                            sh """
                            sshpass -p '${params.targetServerPassword}' ssh -o StrictHostKeyChecking=no ${params.targetServerUser}@${ip} "
                            sudo sed -i 's/#PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config &&
                            sudo grep -q '^PermitRootLogin yes' /etc/ssh/sshd_config || sudo sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config &&
                            sudo systemctl restart sshd"
                            """
                        }
                        echo "********************************* [ DONE ] ****************************************"
                    }
                }
            }
        }

        stage('Check if Target Server is in Known Hosts') {
            steps {
                script {
                    def targetServers = params.targetServerIP.split(',')
                    targetServers.each { server ->
                        def (ip, hostname) = server.split(':')
                        echo "---------------------- Checking if target server ( ${ip} ) is in known hosts ----------------------"
                        def knownHost = sh(
                            script: """
                            ssh -o StrictHostKeyChecking=no ${ANSIBLE_SERVER} "
                            grep -q ${ip} ~/.ssh/known_hosts && echo 'yes' || echo 'no'
                            "
                            """,
                            returnStdout: true
                        ).trim()

                        if (knownHost == 'yes') {
                            echo "Target server ${ip} is ALREADY in known hosts. Skipping SSH key copy."
                        } else {
                            echo "Target server ${ip} is NOT in known hosts. Proceeding with SSH key copy."
                            sshagent(credentials: ['ansible-server-ssh']) {
                                sh """
                                ssh -o StrictHostKeyChecking=no ${ANSIBLE_SERVER} "
                                ssh-keyscan -H ${ip} >> /root/.ssh/known_hosts &&
                                sshpass -p '${params.targetServerPassword}' ssh-copy-id -i ~/.ssh/id_rsa.pub ${params.targetServerUser}@${ip}
                                "
                                """
                            }
                            echo "--------------- SSH key copied to destination server ---------------"
                        }
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    echo "................................... [ BEGIN ANSIBLE CONFIGURATION CD PROCESS ] ..................................."
                    def targetServers = params.targetServerIP.split(',')
                    targetServers.each { server ->
                        def (ip, hostname) = server.split(':')
                        def INVENTORY_FILE = "/tmp/inventory_tmp_${ip}.yml"
                        def PLAYBOOK_FILE = "${ANSIBLE_DIR}/${params.role.toLowerCase()}/${params.role.toLowerCase()}-playbook.yml"
                        def extraVars = [
                            "project=${params.project}",
                            "role=${params.role}",
                            "hostname=${hostname}",
                            "reboot=${params.reboot ? 'y' : 'n'}",
                            "installDocker=${params.installDocker ? 'y' : 'n'}",
                            "addSSHKey=${params.addSSHKey ? 'y' : 'n'}",
                            "addAliases=${params.addAliases ? 'y' : 'n'}",
                            "createUser=${params.createUser ? 'y' : 'n'}",
                            "targetServerIP=${ip}"
                        ].join(' ')

                        if (params.createUser) {
                            extraVars += " username=${params.username} password=${params.password}"
                        }

                        sh """
                        echo "all:
                          hosts:
                            ${ip}:
                              ansible_user: ${params.targetServerUser}" > ${INVENTORY_FILE}
                        """

                        echo "Running playbook for role: ${params.role}, project: ${params.project}, server: ${ip}"
                        sshagent(credentials: ['ansible-server-ssh']) {
                            sh """
                            ssh -o StrictHostKeyChecking=no ${ANSIBLE_SERVER} "cd ${ANSIBLE_DIR} && ansible-playbook -i ${INVENTORY_FILE} ${PLAYBOOK_FILE} --extra-vars '${extraVars}'"
                            """
                        }

                        sh "rm ${INVENTORY_FILE}"

                        echo "............................................ [ END ] ................................................"
                    }
                }
            }
        }
    }
}
