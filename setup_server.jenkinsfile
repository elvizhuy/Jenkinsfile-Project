pipeline {
    agent any

    environment {
        ANSIBLE_DIR = '/etc/ansible/Ansible_Roles'
        GIT_USER = 'elvizhuy'
        GIT_DIR = 'Ansible_Roles'
        PLAYBOOK_REPO = 'https://github.com/${GIT_USER}/${GIT_DIR}.git'
        ANSIBLE_SERVER = 'root@10.0.50.30'
        GIT_CONFIG = 'git config --global --add safe.directory'
        GIT_PULL = 'git pull'
        GIT_CHECKOUT = 'git checkout'
        GIT_BRANCH = 'git branch'
    }

    parameters {
        choice(choices: ["bvp"], description: 'Choose Project', name: 'project')
        choice(choices: ["setup_server"], description: 'Choose Role', name: 'role')
        string(description: 'Enter hostname', name: 'hostname', defaultValue: 'test')
        string(description: 'Enter username', name: 'username', defaultValue: 'isofh')
        password(description: 'Enter password', name: 'password', defaultValue: '123123')
        string(description: 'Enter target server IP : serverIp', name: 'targetServerIP', defaultValue: '10.0.50.32')
        string(description: 'Enter target server user', name: 'targetServerUser', defaultValue: 'root')
        password(description: 'Enter target server password', name: 'targetServerPassword',, defaultValue: '123123')
        booleanParam(description: 'Do you want to reboot?', name: 'reboot', defaultValue: false)
        booleanParam(description: 'Do you want to install Docker?', name: 'installDocker', defaultValue: false)
        booleanParam(description: 'Do you want to add SSH key?', name: 'addSSHKey', defaultValue: false)
        booleanParam(description: 'Do you want to add aliases?', name: 'addAliases', defaultValue: false)
        booleanParam(description: 'Do you want to create user?', name: 'createUser', defaultValue: true)
    }

    stages {
        stage('Choose Ansible Roles') {
            when { expression { params.role != null && params.role != '' }}
            steps {
               script {
                    echo "------------ CHECKOUT ANSIBLE ROLES ------------"
                    sshagent(credentials: ['ansible-server-ssh']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ${ANSIBLE_SERVER} "
                        cd ${ANSIBLE_DIR} && 
                        ${GIT_CONFIG} ${ANSIBLE_DIR} && 
                        ${GIT_PULL} && 
                        ${GIT_CHECKOUT} ${params.project} && 
                        ${GIT_PULL} &&
                        echo '.........Show Git Branch ...........' &&
                        ${GIT_BRANCH} &&
                        echo '....................................'
                        "
                        """
                    }
                    echo "------------- DONE -------------"
                }
            }
        }

        stage('Check if Target Server is in Known Hosts') {
            steps {
                script {
                    echo "Checking if target server ${params.targetServerIP} is in known hosts"
                    def knownHost = sh(
                        script: """
                        ssh -o StrictHostKeyChecking=no ${ANSIBLE_SERVER} "
                        grep -q ${params.targetServerIP} ~/.ssh/known_hosts && echo 'yes' || echo 'no'
                        "
                        """,
                        returnStdout: true
                    ).trim()

                    if (knownHost == 'yes') {
                        echo "Target server ${params.targetServerIP} is already in known hosts. Skipping SSH key copy."
                    } else {
                        echo "Target server ${params.targetServerIP} is not in known hosts. Proceeding with SSH key copy."
                        sshagent(credentials: ['ansible-server-ssh']) {
                            sh """
                            ssh -o StrictHostKeyChecking=no ${ANSIBLE_SERVER} "
                            ssh-keyscan -H ${params.targetServerIP} >> /root/.ssh/known_hosts &&
                            sshpass -p '${params.targetServerPassword}' ssh-copy-id -i ~/.ssh/id_rsa.pub ${params.targetServerUser}@${params.targetServerIP}
                            "
                            """
                        }
                        echo "------------- SSH key copied to destination server -------------"
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    def INVENTORY_FILE = "${ANSIBLE_DIR}/${params.role.toLowerCase()}/inventory/inventory.yml"
                    def PLAYBOOK_FILE = "${ANSIBLE_DIR}/${params.role.toLowerCase()}/${params.role.toLowerCase()}-playbook.yml"
                    def extraVars = [
                        "project=${params.project}",
                        "role=${params.role}",
                        "hostname=${params.hostname}",
                        "reboot=${params.reboot ? 'y' : 'n'}",
                        "installDocker=${params.installDocker ? 'y' : 'n'}",
                        "addSSHKey=${params.addSSHKey ? 'y' : 'n'}",
                        "addAliases=${params.addAliases ? 'y' : 'n'}",
                        "createUser=${params.createUser ? 'y' : 'n'}"
                    ].join(' ')
                    // def extraVars = "project=${params.project} role=${params.role} hostname=${params.hostname} reboot=${params.reboot} installDocker=${params.installDocker} addSSHKey=${params.addSSHKey} addAliases=${params.addAliases} createUser=${params.createUser}"

                    if (params.createUser) {
                        extraVars += " username=${params.username} password=${password}"
                    }

                    echo "Running playbook for role: ${params.role}, project: ${params.project}"
                    sshagent(credentials: ['ansible-server-ssh']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ${ANSIBLE_SERVER} "cd ${ANSIBLE_DIR} && ansible-playbook -i ${INVENTORY_FILE} ${PLAYBOOK_FILE} --extra-vars '${extraVars}'"
                        """
                    }
                }
            }
        }
    }
}
